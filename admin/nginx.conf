server {server {server {

    listen 80;

    listen [::]:80;    listen 80;    listen 80;

    server_name fbdatabase.com www.fbdatabase.com;

    listen [::]:80;    listen [::]    # API proxyserver {

    root /usr/share/nginx/html;

    index index.html;    server_name fbdatabase.com www.fbdatabase.com;    listen 80;



    # Enable gzip compression    listen [::]:80;

    gzip on;

    gzip_types    root /usr/share/nginx/html;    server_name fbdatabase.com www.fbdatabase.com;

        text/plain

        text/css    index index.html;

        text/js

        text/xml    root /usr/share/nginx/html;

        text/javascript

        application/javascript    # Enable gzip compression    index index.html;

        application/xml+rss

        application/json;    gzip on;

    gzip_min_length 1000;

    gzip_types    # Enable gzip compression

    # Security headers

    add_header X-Frame-Options "SAMEORIGIN" always;        text/plain    gzip on;

    add_header X-XSS-Protection "1; mode=block" always;

    add_header X-Content-Type-Options "nosniff" always;        text/css    gzip_types

    add_header Referrer-Policy "no-referrer-when-downgrade" always;

    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;        text/js        text/plain



    # Handle Vue.js routing (SPA)        text/xml        text/css

    location / {

        try_files $uri $uri/ /index.html;        text/javascript        text/js

    }

        application/javascript        text/xml

    # Cache static assets

    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {        application/xml+rss        text/javascript

        expires 1y;

        add_header Cache-Control "public, immutable";        application/json;        application/javascript

    }

    gzip_min_length 1000;        application/xml+rss

    # API proxy to backend

    location /api/ {        application/json;

        proxy_pass http://backend:3000/api/;

        proxy_http_version 1.1;    # Security headers    gzip_min_length 1000;

        proxy_set_header Upgrade $http_upgrade;

        proxy_set_header Connection 'upgrade';    add_header X-Frame-Options "SAMEORIGIN" always;

        proxy_set_header Host $host;

        proxy_set_header X-Real-IP $remote_addr;    add_header X-XSS-Protection "1; mode=block" always;    # Security headers

        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        proxy_set_header X-Forwarded-Proto $scheme;    add_header X-Content-Type-Options "nosniff" always;    add_header X-Frame-Options "SAMEORIGIN" always;

        proxy_cache_bypass $http_upgrade;

        proxy_connect_timeout 300;    add_header Referrer-Policy "no-referrer-when-downgrade" always;    add_header X-XSS-Protection "1; mode=block" always;

        proxy_send_timeout 300;

        proxy_read_timeout 300;    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;    add_header X-Content-Type-Options "nosniff" always;

        send_timeout 300;

    }    add_header Referrer-Policy "no-referrer-when-downgrade" always;



    # Health check endpoint    # Handle Vue.js routing (SPA)    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

    location /health {

        access_log off;    location / {

        return 200 "healthy\n";

        add_header Content-Type text/plain;        try_files $uri $uri/ /index.html;    # Handle Vue.js routing (SPA)

    }

    }    location / {

    # Error pages

    error_page 404 /index.html;        try_files $uri $uri/ /index.html;

    error_page 500 502 503 504 /50x.html;

        # Cache static assets    }

    location = /50x.html {

        root /usr/share/nginx/html;    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {

    }

}        expires 1y;    # Cache static assets

        add_header Cache-Control "public, immutable";    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {

    }        expires 1y;

        add_header Cache-Control "public, immutable";

    # API proxy to backend (fallback for local API calls)    }

    location /api/ {

        proxy_pass http://backend:3000/api/;    # API proxy to backend (fallback for local API calls)

        proxy_http_version 1.1;    location /api/ {

        proxy_set_header Upgrade $http_upgrade;        proxy_pass http://backend:3000/api/;

        proxy_set_header Connection 'upgrade';        proxy_http_version 1.1;

        proxy_set_header Host $host;        proxy_set_header Upgrade $http_upgrade;

        proxy_set_header X-Real-IP $remote_addr;        proxy_set_header Connection 'upgrade';

        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;        proxy_set_header Host $host;

        proxy_set_header X-Forwarded-Proto $scheme;        proxy_set_header X-Real-IP $remote_addr;

        proxy_cache_bypass $http_upgrade;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        proxy_connect_timeout 300;        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_send_timeout 300;        proxy_cache_bypass $http_upgrade;

        proxy_read_timeout 300;        proxy_connect_timeout 300;

        send_timeout 300;        proxy_send_timeout 300;

    }        proxy_read_timeout 300;

        send_timeout 300;

    # Health check endpoint    }

    location /health {

        access_log off;    # Health check endpoint

        return 200 "healthy\n";    location /health {

        add_header Content-Type text/plain;        access_log off;

    }        return 200 "healthy\n";

        add_header Content-Type text/plain;

    # Error pages    }

    error_page 404 /index.html;

    error_page 500 502 503 504 /50x.html;    # Error pages

        error_page 404 /index.html;

    location = /50x.html {    error_page 500 502 503 504 /50x.html;

        root /usr/share/nginx/html;    

    }    location = /50x.html {

}        root /usr/share/nginx/html;
    }
}llback for local API calls)
    location /api/ {
        proxy_pass http://backend:3000/api/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        proxy_connect_timeout 300;
        proxy_send_timeout 300;
        proxy_read_timeout 300;
        send_timeout 300;
    }name fbdatabase.com www.fbdatabase.com;

    root /usr/share/nginx/html;
    index index.html;

    # Enable gzip compression
    gzip on;
    gzip_types
        text/plain
        text/css
        text/js
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json;
    gzip_min_length 1000;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

    # Handle Vue.js routing (SPA)
    location / {
        try_files $uri $uri/ /index.html;
    }

    # Cache static assets
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
    }

    # API proxy to backend
    location /api/ {
        proxy_pass http://api.fbdatabase.com/api/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_Set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        proxy_connect_timeout 300;
        proxy_send_timeout 300;
        proxy_read_timeout 300;
        send_timeout 300;
    }

    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # Error pages
    error_page 404 /index.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /50x.html {
        root /usr/share/nginx/html;
    }
}