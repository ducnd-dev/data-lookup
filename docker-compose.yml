services:
  # Frontend Next.js application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: data-lookup-frontend
    environment:
      - NODE_ENV=production
      - BACKEND_URL=http://backend:3000/api
      - NEXTAUTH_URL=https://fbdatabase.com
      - NEXTAUTH_SECRET=your-secret-key-for-production
      - NEXT_PUBLIC_APP_NAME=UID Converter
      - NEXT_PUBLIC_API_URL=https://api.fbdatabase.com
    depends_on:
      - backend
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Admin Vue.js application (static files only)
  admin:
    build:
      context: ./admin
      dockerfile: Dockerfile
    container_name: data-lookup-admin
    networks:
      - app-network
    restart: unless-stopped

  # Backend NestJS API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: data-lookup-backend
    env_file: ./backend/.env
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/fbdatabase
      - REDIS_URL=redis://redis:6379
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - NODE_ENV=production
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - uploads-data:/app/uploads
      - ./logs:/app/logs
    networks:
      - app-network
    restart: unless-stopped
    # Fix volume permissions
    user: "1001:65533"
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: data-lookup-db
    # REMOVED: ports exposure for security
    ports:
      - "54322:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: fbdatabase
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and queues
  redis:
    image: redis:7-alpine
    container_name: data-lookup-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # External Nginx Proxy
  nginx:
    image: nginx:alpine
    container_name: data-lookup-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - admin
      - backend
    networks:
      - app-network
    restart: unless-stopped

volumes:
  pgdata:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres
  redis-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis
  uploads-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/uploads

networks:
  app-network:
    driver: bridge